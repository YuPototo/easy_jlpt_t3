import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { createProxySSGHelpers } from "@trpc/react-query/ssg";
import superjson from "superjson";
import { appRouter } from "../server/api/root";
import { createInnerTRPCContext } from "../server/api/trpc";
import { api } from "../utils/api";

export async function getStaticProps() {
  const ssg = createProxySSGHelpers({
    router: appRouter,
    ctx: createInnerTRPCContext({}),
    transformer: superjson, // optional - adds superjson serialization
  });

  await ssg.book.all.prefetch();

  return {
    props: {
      trpcState: ssg.dehydrate(),
    },
    // regenerate every 30 minutes
    revalidate: 60 * 30,
  };
}

const Home: NextPage = () => {
  // This query will be immediately available as it's prefetched.
  const { data: books } = api.book.all.useQuery();

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen flex-col items-center">
        <div>This is home page</div>
        {books ? (
          books.map((book) => (
            <div key={book.id}>
              <Link href={`/books/${encodeURIComponent(book.uniqueTitle)}`}>
                {book.title}
              </Link>
            </div>
          ))
        ) : (
          <div>loading...</div>
        )}
      </main>
    </>
  );
};

export default Home;
